---
description: 
globs: 
alwaysApply: false
---
# ソースコード持続可能性ガイドライン

## アーキテクチャ設計
- パッケージベースの構造を維持し、機能ごとに適切に分割
- 各コンポーネントの責務を明確に分離
- 再利用可能なコンポーネントは適切に抽出
- 画面遷移やデータフローは明確に定義

## コード品質
- テスト可能なコード設計を心がける
- 各クラスは設計のレイヤーに対応した責務だけを持つように実装
- 循環依存を避け、依存関係は一方向に
- コメントは「なぜ」を説明するものに限定
- 未来の自分や新規参入者が見ても理解できるよう、暗黙知を生まないよう注意を払い、形式知化する
  - コードの表現力と可読性の向上、テストコードによる情報の補完、コメントによる記録、実装と近いパッケージにREADMEを置くなどの方法で形式知化を実現する

## 命名規則
- クラス名: PascalCase
- 関数・変数名: camelCase
- 定数: UPPER_SNAKE_CASE
- パッケージ名: 小文字のみ

## エラーハンドリング
- 例外は適切なレベルで捕捉
- ユーザーへのエラーメッセージは明確で具体的に
- ログは適切なレベルで出力

## パフォーマンス
- メモリリークを防ぐため、リソースは適切に解放
- バックグラウンド処理は適切なスレッドで実行
- 画像リソースは適切なサイズで最適化

## セキュリティ
- センシティブなデータは適切に暗号化
- ユーザー入力は必ずバリデーション
- セキュリティ関連の設定は定数化

## テスト
- ユニットテストは必須
- UIテストは重要なフローに対して実装
- アプリケーションの振る舞いを検証することと、変更に耐えうる設計の維持を目的としてユニットテストは実装する

## ドキュメント
- 公開APIには必ずKDocを記述
- 複雑なロジックには説明コメントを追加
- アーキテクチャの変更は必ずドキュメント化

## バージョン管理
- コミットメッセージは明確で具体的に
- 機能追加は適切なブランチで開発
- コードレビューは必須

## 依存関係
- サードパーティライブラリは必要最小限かつ公式推奨のものを採用する
- ライブラリのバージョンは定期的に更新
- 依存関係の変更は慎重に評価
